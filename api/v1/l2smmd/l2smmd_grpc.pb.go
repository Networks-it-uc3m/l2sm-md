// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: l2smmd.proto

package l2smmd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	L2SMMultiDomainService_CreateNetwork_FullMethodName = "/l2smmd.L2SMMultiDomainService/CreateNetwork"
	L2SMMultiDomainService_DeleteNetwork_FullMethodName = "/l2smmd.L2SMMultiDomainService/DeleteNetwork"
	L2SMMultiDomainService_CreateSlice_FullMethodName   = "/l2smmd.L2SMMultiDomainService/CreateSlice"
	L2SMMultiDomainService_DeleteSlice_FullMethodName   = "/l2smmd.L2SMMultiDomainService/DeleteSlice"
	L2SMMultiDomainService_CreateOverlay_FullMethodName = "/l2smmd.L2SMMultiDomainService/CreateOverlay"
	L2SMMultiDomainService_AddCluster_FullMethodName    = "/l2smmd.L2SMMultiDomainService/AddCluster"
	L2SMMultiDomainService_RemoveCluster_FullMethodName = "/l2smmd.L2SMMultiDomainService/RemoveCluster"
	L2SMMultiDomainService_DeleteOverlay_FullMethodName = "/l2smmd.L2SMMultiDomainService/DeleteOverlay"
)

// L2SMMultiDomainServiceClient is the client API for L2SMMultiDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type L2SMMultiDomainServiceClient interface {
	// Network management
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
	// Slice management
	CreateSlice(ctx context.Context, in *CreateSliceRequest, opts ...grpc.CallOption) (*CreateSliceResponse, error)
	DeleteSlice(ctx context.Context, in *DeleteSliceRequest, opts ...grpc.CallOption) (*DeleteSliceResponse, error)
	// Overlay topology management
	CreateOverlay(ctx context.Context, in *CreateOverlayRequest, opts ...grpc.CallOption) (*CreateOverlayResponse, error)
	AddCluster(ctx context.Context, in *AddClusterRequest, opts ...grpc.CallOption) (*AddClusterResponse, error)
	RemoveCluster(ctx context.Context, in *RemoveClusterRequest, opts ...grpc.CallOption) (*RemoveClusterResponse, error)
	DeleteOverlay(ctx context.Context, in *DeleteOverlayRequest, opts ...grpc.CallOption) (*DeleteOverlayResponse, error)
}

type l2SMMultiDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewL2SMMultiDomainServiceClient(cc grpc.ClientConnInterface) L2SMMultiDomainServiceClient {
	return &l2SMMultiDomainServiceClient{cc}
}

func (c *l2SMMultiDomainServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_DeleteNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) CreateSlice(ctx context.Context, in *CreateSliceRequest, opts ...grpc.CallOption) (*CreateSliceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSliceResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_CreateSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) DeleteSlice(ctx context.Context, in *DeleteSliceRequest, opts ...grpc.CallOption) (*DeleteSliceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSliceResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_DeleteSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) CreateOverlay(ctx context.Context, in *CreateOverlayRequest, opts ...grpc.CallOption) (*CreateOverlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOverlayResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_CreateOverlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) AddCluster(ctx context.Context, in *AddClusterRequest, opts ...grpc.CallOption) (*AddClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddClusterResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_AddCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) RemoveCluster(ctx context.Context, in *RemoveClusterRequest, opts ...grpc.CallOption) (*RemoveClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveClusterResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_RemoveCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2SMMultiDomainServiceClient) DeleteOverlay(ctx context.Context, in *DeleteOverlayRequest, opts ...grpc.CallOption) (*DeleteOverlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOverlayResponse)
	err := c.cc.Invoke(ctx, L2SMMultiDomainService_DeleteOverlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// L2SMMultiDomainServiceServer is the server API for L2SMMultiDomainService service.
// All implementations must embed UnimplementedL2SMMultiDomainServiceServer
// for forward compatibility.
//
// Service definition
type L2SMMultiDomainServiceServer interface {
	// Network management
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	// Slice management
	CreateSlice(context.Context, *CreateSliceRequest) (*CreateSliceResponse, error)
	DeleteSlice(context.Context, *DeleteSliceRequest) (*DeleteSliceResponse, error)
	// Overlay topology management
	CreateOverlay(context.Context, *CreateOverlayRequest) (*CreateOverlayResponse, error)
	AddCluster(context.Context, *AddClusterRequest) (*AddClusterResponse, error)
	RemoveCluster(context.Context, *RemoveClusterRequest) (*RemoveClusterResponse, error)
	DeleteOverlay(context.Context, *DeleteOverlayRequest) (*DeleteOverlayResponse, error)
	mustEmbedUnimplementedL2SMMultiDomainServiceServer()
}

// UnimplementedL2SMMultiDomainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedL2SMMultiDomainServiceServer struct{}

func (UnimplementedL2SMMultiDomainServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) CreateSlice(context.Context, *CreateSliceRequest) (*CreateSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlice not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) DeleteSlice(context.Context, *DeleteSliceRequest) (*DeleteSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlice not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) CreateOverlay(context.Context, *CreateOverlayRequest) (*CreateOverlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOverlay not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) AddCluster(context.Context, *AddClusterRequest) (*AddClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCluster not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) RemoveCluster(context.Context, *RemoveClusterRequest) (*RemoveClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCluster not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) DeleteOverlay(context.Context, *DeleteOverlayRequest) (*DeleteOverlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOverlay not implemented")
}
func (UnimplementedL2SMMultiDomainServiceServer) mustEmbedUnimplementedL2SMMultiDomainServiceServer() {
}
func (UnimplementedL2SMMultiDomainServiceServer) testEmbeddedByValue() {}

// UnsafeL2SMMultiDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to L2SMMultiDomainServiceServer will
// result in compilation errors.
type UnsafeL2SMMultiDomainServiceServer interface {
	mustEmbedUnimplementedL2SMMultiDomainServiceServer()
}

func RegisterL2SMMultiDomainServiceServer(s grpc.ServiceRegistrar, srv L2SMMultiDomainServiceServer) {
	// If the following call pancis, it indicates UnimplementedL2SMMultiDomainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&L2SMMultiDomainService_ServiceDesc, srv)
}

func _L2SMMultiDomainService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_CreateSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).CreateSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_CreateSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).CreateSlice(ctx, req.(*CreateSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_DeleteSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).DeleteSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_DeleteSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).DeleteSlice(ctx, req.(*DeleteSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_CreateOverlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOverlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).CreateOverlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_CreateOverlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).CreateOverlay(ctx, req.(*CreateOverlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_AddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).AddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_AddCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).AddCluster(ctx, req.(*AddClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_RemoveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).RemoveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_RemoveCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).RemoveCluster(ctx, req.(*RemoveClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2SMMultiDomainService_DeleteOverlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOverlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2SMMultiDomainServiceServer).DeleteOverlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2SMMultiDomainService_DeleteOverlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2SMMultiDomainServiceServer).DeleteOverlay(ctx, req.(*DeleteOverlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// L2SMMultiDomainService_ServiceDesc is the grpc.ServiceDesc for L2SMMultiDomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var L2SMMultiDomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "l2smmd.L2SMMultiDomainService",
	HandlerType: (*L2SMMultiDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _L2SMMultiDomainService_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _L2SMMultiDomainService_DeleteNetwork_Handler,
		},
		{
			MethodName: "CreateSlice",
			Handler:    _L2SMMultiDomainService_CreateSlice_Handler,
		},
		{
			MethodName: "DeleteSlice",
			Handler:    _L2SMMultiDomainService_DeleteSlice_Handler,
		},
		{
			MethodName: "CreateOverlay",
			Handler:    _L2SMMultiDomainService_CreateOverlay_Handler,
		},
		{
			MethodName: "AddCluster",
			Handler:    _L2SMMultiDomainService_AddCluster_Handler,
		},
		{
			MethodName: "RemoveCluster",
			Handler:    _L2SMMultiDomainService_RemoveCluster_Handler,
		},
		{
			MethodName: "DeleteOverlay",
			Handler:    _L2SMMultiDomainService_DeleteOverlay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l2smmd.proto",
}
